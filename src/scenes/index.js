const Scene = require('telegraf/scenes/base')
const Markup = require('telegraf/markup')
const Extra = require("telegraf/extra")
const Notes = require("../Notes/Notes")
const setDateAndTimeNote = require("../../utils/timer")

class SceneControll {

	constructor() {
		this.dataUser = {}
	}

	NotesType() {
		const sceneNotesType = new Scene("NotesType")
		
		sceneNotesType.enter(ctx => {
			ctx.reply(
				`${ctx.message.from.first_name}, –Ω—É –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º üòé`,
				Markup.inlineKeyboard([
					Markup.callbackButton("–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞", "temporaryNotes")
				]).extra()
			)
		})

		sceneNotesType.action("temporaryNotes", ctx => {
			this.dataUser.NotesType = "temporaryNotes"
			ctx.scene.enter("CreateNotes")
		})

		return sceneNotesType
	}

	CreateNotes() {
		const sceneCreateNotes = new Scene("CreateNotes")
		sceneCreateNotes.enter(ctx => {
			ctx.reply("–¢—ã –∂ –±–µ–∑ –º–µ–Ω—è –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è, —á—Ç–æ —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? ‚úçüèºüßê")
		})

		sceneCreateNotes.on("message", ctx => {
			if(!ctx.message.text) {
				ctx.reply("–ù–µ—Ç, –¥–∞–≤–∞–π –≤—Å–µ –∂–µ –ø–æ —Å—Ç–∞—Ä–∏–Ω–∫–µ, —Ç–µ–∫—Å—Ç–æ–º üôÑ")
				return ctx.scene.reenter()
			} 
			
			this.dataUser.chatId = ctx.message.chat.id
			this.dataUser.msg = ctx.message.text

			ctx.scene.enter("SetDateAndTimeNotes")
		})

		return sceneCreateNotes
	}

	SetDateAndTimeNotes() {
		const sceneSetDateAndTimeNotes = new Scene("SetDateAndTimeNotes")

		sceneSetDateAndTimeNotes.enter(ctx => {
			ctx.reply("–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ç–µ–±—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å?\n<i>(—Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º>')</i>",
				Extra.HTML()
			)
		})

		sceneSetDateAndTimeNotes.on("text", ctx => {
			if(!ctx.message.text) {
				return ctx.scene.reenter()
			}

			/* this.dataUser.dateAndTime = new Date(ctx.message.text) */
			const time = setDateAndTimeNote(ctx.message.text)
			
			if(!time && !Number(time) ) {
				ctx.reply("–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...")
				return ctx.scene.reenter()
			}

			const notes = new Notes(this.dataUser)

			console.log(time);

			setTimeout(() => {
				ctx.reply(`üìç–ù–∞–ø–æ–º–∏–Ω–∞—é:\n ‚Äî ${notes.msg}`)
			}, time)

			ctx.scene.leave()

		}) 

		sceneSetDateAndTimeNotes.leave(ctx => {
			ctx.reply('–¢–∞–∫, –≤—Ä–æ–¥–µ –∑–∞–ø–æ–º–Ω–∏–ª ü§î\n–ö–∞–∫ –≤—Ä–µ–º—è –ø–æ–¥–æ–π–¥–µ—Ç –æ–ø–æ–≤–µ—â—É ‚è∞')
		})

		return sceneSetDateAndTimeNotes
	}
} 

module.exports = new SceneControll()